{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"title": "Test Card Schema",
	"description": "The Schmea for the test card generator",
	"type": "object",
	"properties": {
		"type": {
			"type": "string",
			"enum": [
				"builtin.frameCounter"
			],
			"description": "This to be labelled as \"builtin.frameCounter\", so that the json is correctly configured"
		},		"colorSpace" : {
			"type" : "object"
		},
		"grid": {
            "$ref": "#/$defs/gridschema"
        },
		"frameCounter": {
			"type": "boolean",
			"description": "If true a frame counter is generated in the bottom right corner of the image that sequentially increases with each json object"
		},
		"gridPosition": {
			"type": "object",
			"properties": {
				"x": {
					"$ref": "#/$defs/locations"
				},
				"y": {
					"$ref": "#/$defs/locations"
				},
				"alias": {
					"type": "string",
					"enum": [
						"bottom right",
						"bottom left",
						"top right",
						"top left"
					],
					"description":"alias for the varying locations of the framecounter"
				}
			},
			"oneOf": [
				{"anyOf":[
				{
					"required": [
						"x",
						"y"
					]
				},
				{
					"required": [
						"x"
					]
				},
				{
					"required": [
						"y"
					]
				}]},
				{
					"required": [
						"alias"
					]
				}
			]
		},
		"textColor": {
			"$ref": "#/$defs/anycolour"
		},
		"backgroundColor": {
			"$ref": "#/$defs/anycolour"
		},
		"font" :{
			"type": "string",
			"minLength": 1,
            "maxLength": 255,
			"description": "The location of the font ttf file to be used, or a choice of one of the pre included ones of: \"body\", \"header\" and \"title\""
		}, 
		"fontSize": {
			"description": "the height of the frame font",
			"type": "number",
			"minimum": 0
		}
	},
	"required": [
		"type",
		"frameCounter",
		"grid"
	],
	"additionalProperties": false,
	"$defs": {
		"locations": {
			"type": "number",
            "minimum": 0,
            "maximum": 100
		},
		"dimensions": {
			"type": "number",
            "minimum": 0,
            "maximum": 100
		},
		"anycolour":{"anyOf":[{"$ref": "#/$defs/colourReg/6hex"},
							 {"$ref": "#/$defs/colourReg/3hex"},
							 {"$ref": "#/$defs/colourReg/8hex"},
							 {"$ref": "#/$defs/colourReg/4hex"},
							 {"$ref": "#/$defs/colourReg/cssrgb"},
							 {"$ref": "#/$defs/colourReg/cssrgba"},
							 {"$ref": "#/$defs/colourReg/cssrgb12"},
							 {"$ref": "#/$defs/colourReg/cssrgba12"}
   ]},
		"colourReg": {
			"6hex": {
				"type": "string",
				"pattern": "^#[A-Fa-f0-9]{6}$",
				"description": "## Example\n This follows the pattern #rrggbb in hexcode, the values can be 0-9 and a-f e.g. #c45ea3 is acceptable but #aga6ah is not."
			},
			"3hex": {
				"type": "string",
				"pattern": "^#[A-Fa-f0-9]{3}$",
				"description": "## Example\nThis follows the pattern #rgb in single hexcode, the values can be 0-9 and a-f e.g. #c53 is acceptable but #g6h is not."
			},
			"8hex": {
				"type": "string",
				"pattern": "^#[A-Fa-f0-9]{8}$",
				"description": "## Example\nThis follows the pattern #rrggbbaa in hexcode, the values can be 0-9 and a-f e.g. #c45ea3ff is acceptable but #aga6ahff is not."
			},
			"4hex": {
				"type": "string",
				"pattern": "^#[A-Fa-f0-9]{4}$",
				"description": "## Example\nThis follows the pattern #rgba in single hexcode, the values can be 0-9 and a-f e.g. #c53f is acceptable but #g6h is not."
			},
			"cssrgba": {
				"type": "string",
				"pattern": "^(rgba\\()\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\)$",
				"description": "## Example\nThis follows the pattern rgba(rval,gval,bval,aval), the values are between 0.255 e.g. rgb(240,220,4,255) is acceptable but rgb(240,-5,400,23) is not."
			},
			"cssrgb": {
				"type": "string",
				"pattern": "^(rgb\\()\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\)$",
				"description": "## Example\nThis follows the pattern rgb(rval,gval,bval), the values are between 0.255 e.g. rgb(240,220,4) is acceptable but rgb(240,-5,400) is not."
			},
			"cssrgb12": {
				"type": "string",
				"pattern":"^rgb12\\(([0-3]?[0-9]{1,3}|40[0-9][0-5]),([0-3]?[0-9]{1,3}|40[0-9][0-5]),([0-3]?[0-9]{1,3}|40[0-9][0-5])\\)$"
			},
			"cssrgba12": {
				"type": "string",
				"pattern":"^rgba12\\(([0-3]?[0-9]{1,3}|40[0-9][0-5]),([0-3]?[0-9]{1,3}|40[0-9][0-5]),([0-3]?[0-9]{1,3}|40[0-9][0-5]),([0-3]?[0-9]{1,3}|40[0-9][0-5])\\)$"
			}
		},
		"gridschema": {
            "properties": {
                "location": {
                    "anyOf": [
						{
								"type": "string",
								"pattern": "^[a-pA-P]{1}[0-8]{1}$"
							
						},
						{
		
								"type": "string",
								"pattern": "^[\\w\\W]{1,30}$"
							
						}
					],
                    "description": "The location of the module to be added to the test card"
                },
                "alias": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 30,
                    "description": "The name to refer to the chosen grid location for the module, these are reset for each section in the array and are optional"
                }
            },
            "required": [
                "location"
            ],
            "additionalProperties": false
        }
	}
}